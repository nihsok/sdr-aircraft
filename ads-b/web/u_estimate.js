d3.csv("./data.csv").then(function(data){
  const margin = {top:10, right:15, bottom:85, left:80},
        width  = 450 - margin.left - margin.right,
        height = 450 - margin.top - margin.bottom;

  const x = d3.scaleLinear().range([0, width])
  const y = d3.scaleLinear().range([height, 0])

  const svg = d3.select("#check")
    .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform","translate(" + margin.left + "," + margin.top + ")")
  const tooltip = d3.select("body")
    .append("div")
    .attr("class", "tooltip")
    .style("background-color", "white")
  //x axis
  svg.append("g")
  .attr("transform", "translate(0," + height + ")")
  .call(d3
    .axisBottom(x.domain([-500,500]))
    .tickValues(d3.range(-500,501,100))
    .tickFormat(val => val% 200 == 0 ? val : ''))
  .style("font-size",20)
  .append("text")
    .attr("fill", "black")
    .attr("x", width / 2 )
    .attr("y", 45)
    .text('U [m/s]')
  svg.append("g")
  .call(d3
    .axisTop(x.domain([-500,500]))
    .tickValues(d3.range(-500,501,100))
    .tickFormat(''))
  //y axis
  svg.append("g")
  .call(d3
    .axisLeft(y.domain([-500,500]))
    .tickValues(d3.range(-500,501,100))
    .tickFormat((val) => val % 10 == 0 ? val.toString() : ''))
  .style("font-size",20)
  .append("text")
  .attr("fill","black")
  .attr("text-anchor","middle")
  .attr("x",  - height / 2 - margin.top)
  .attr("y", -60)
  .attr("transform","rotate(-90)")
  .text("V [m/s]")
  svg.append("g")
  .attr('transform',"translate(" + width + ",0)")
  .call(d3
    .axisRight(y.domain([-500,500]))
    .tickValues(d3.range(-500,501,100))
    .tickFormat(''))

  svg.selectAll("circle")
    .data([500,400,300,200,100])
    .enter()
    .append("circle")
    .attr("fill","white")
    .attr("stroke","black")
    .attr("cx",x(0))
    .attr("cy",y(0))
    .attr("r",d => d*0.355)
    .style("opacity", 0.1)

  svg.selectAll(null)
    .data(data.filter(d => d.u))
    .enter()
    .append("line")
    .attr("x1", x(0))
    .attr("y1", y(0))
    .attr("x2", d=>x(d.u))
    .attr("y2", d=>y(d.v))
    .style("stroke","red")
    .style("stroke-width",1)

    svg.selectAll(null)
    .data(data.filter(d=>d.u))
    .enter()
    .append("line")
    .attr("x1", x(0))
    .attr("y1", y(0))
    .attr("x2", d=>x(d.vt_x))
    .attr("y2", d=>y(d.vt_y))
    .style("stroke","blue")
    .style("stroke-width",1)

    // svg.selectAll(null)
    // .data(data.filter(d=>d.u))
    // .enter()
    // .append("line")
    // .attr("x1", x(0))
    // .attr("y1", y(0))
    // .attr("x2", (d)=>(x((d.u+d.vt_x))))
    // .attr("y2", (d)=>(y((d.v+d.vt_y))))
    // .style("stroke","black")
    // .style("stroke-width",1)  
    //x(d.u+d.vt_x)という形式はできない。x(d.u)+x(d.vt_x)だとできるが数字が異なる。
})